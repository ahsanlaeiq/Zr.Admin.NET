<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="nlog-internal.log">
	<!--Nlog document reference address: https://github.com/NLog/NLog/wiki/Getting-started-with-ASP.NET-Core-2-->
	<!--internalLogLevel: Nlog internal logging is set to Off. Unless for debugging purposes, it should not be set to Trace as it will significantly slow down the application, at least Debug or above should be used-->
	<!--Custom variables-->
	<variable name="logDir" value="${basedir}/nlogs/${date:format=yyyyMMdd}/${level}.log"/>

	<!-- Load the ASP.NET Core plugin, enable ASP.NET Core layout renderers-->
	<extensions>
		<add assembly="NLog.Web.AspNetCore" />
	</extensions>

	<!-- Define various log targets-->
	<targets async="true">
		<!--Write to file-->
		<!--The maximum number of rolled log files. When the number of rolled log files reaches the limit, the content of the new file will overwrite the content of the old file-->
		<!--archiveAboveSize: the maximum size (in bytes) of each log file. When the main log file exceeds this size, its content will be written to a rolled log file and the main log file will be cleared-->
		<!--${basedir}: represents the root directory of the current application domain-->
		<target name="allfile" xsi:type="File"
				fileName="${basedir}/adminlogs/all.txt"
				archiveFileName="${basedir}/adminlogs/bak/all/all.{###}.txt"
				archiveEvery="Day"
				archiveNumbering="DateAndSequence"
				archiveAboveSize="20000000"
				maxArchiveFiles="30"
				keepFileOpen="true"
				layout="${longdate}|${event-properties:item=EventId:whenEmpty=0}|${aspnet-request-connection-id}|${uppercase:${level}}|${logger}|${aspnet-request-iP:CheckForwardedForHeader=true}|${event-properties:item=user:whenEmpty=-}|url: ${aspnet-request-url}|${message:whenEmpty=-}|${event-properties:item=requestParam}|${event-properties:item=jsonResult}"/>

		<!--Error log-->
		<target name="errorfile" xsi:type="File"
				fileName="${basedir}/adminlogs/error.txt"
				archiveFileName="${basedir}/adminlogs/bak/error/error.{###}.txt"
				archiveEvery="Day"
				archiveNumbering="DateAndSequence"
				archiveAboveSize="20000000"
				maxArchiveFiles="30"
				keepFileOpen="true"
				layout="${longdate}|${event-properties:item=EventId:whenEmpty=0}|${aspnet-request-connection-id}|${uppercase:${level}}|${logger}${newline}User IP: ${aspnet-request-iP:CheckForwardedForHeader=true}|${event-properties:item=user}${newline}Request URL: ${aspnet-request-url}${newline}Error Message: ${message}${newline}Request Parameters: ${event-properties:item=requestParam}${newline}Request Result: ${event-properties:item=jsonResult}${newline}${onexception:${exception:format=tostring}"/>

		<!--SQL log-->
		<target name="sqlfile" xsi:type="File"
			fileName="${basedir}/adminlogs/sql.txt"
			archiveFileName="${basedir}/adminlogs/bak/sql/sql{###}.txt"
			archiveEvery="Day"
			archiveNumbering="DateAndSequence"
			archiveAboveSize="20000000"
			maxArchiveFiles="30"
			keepFileOpen="false"
			layout="${longdate} | ${uppercase:${level}} | ${aspnet-request-connection-id} | ${aspnet-request-iP} | ${aspnet-request-headers:HeaderNames=userName} | ${aspnet-request-url} ${newline}${message}"/>

		<!--Write to colored console-->
		<target name="consoleSql" xsi:type="ColoredConsole" useDefaultRowHighlightingRules="false"
				layout="${date:format=MM-dd HH\:mm\:ss}|${aspnet-request-iP}|${aspnet-request-connection-id}|${aspnet-request-url}${newline}${message}">
			<highlight-row condition="level == LogLevel.Debug" foregroundColor="DarkGray" />
			<highlight-row condition="level == LogLevel.Info" foregroundColor="Gray" />
			<highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
			<highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
			<highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
			<highlight-word regex="SQL" foregroundColor="Blue" />
			<highlight-word regex="【" foregroundColor="Blue" />
			<highlight-word regex="】" foregroundColor="Blue" />
		</target>

		<!--Write to blackhole-->
		<target name="blackhole" xsi:type="Null" />
	</targets>

	<rules>
		<!--Unless for debugging purposes, skip logging of .NET Core assembly Debug output. Trace -> Debug -> Info -> Warn -> Error -> Critical-->
		<!--Skip logging of all levels for Microsoft components-->
		<logger name="Microsoft.*" writeTo="blackhole" final="true" />
		<!--Unless for debugging purposes, skip logging of system Debug output-->
		<!--<logger name="System.*" writeTo="blackhole" final="true" />-->
		<!--Quartz-->
		<logger name="Quartz*" minlevel="Trace" maxlevel="Info" final="true" />
		<logger name="*.SqlSugar.SqlsugarSetup" final="true" writeTo="consoleSql,sqlfile"/>
		<logger name="*" minLevel="Trace" writeTo="allfile" />
		<logger name="*.GlobalExceptionMiddleware" final="true" writeTo="consoleSql,errorfile"/>

		<!--Skip non-critical Microsoft logs and only log own logs-->
		<logger name="Microsoft.*,Quartz.Core.QuartzSchedulerThread" maxlevel="Info" final="true" />
	</rules>

</nlog>
